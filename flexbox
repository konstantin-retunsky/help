display: flex - такой контейнер называется флекс-контейнер, а его элементы флекс-элементы

fle-direction: row - выстраивает все элементы в строчном формате, это значение идет по умолчанию  у флекс-контейнера
flex-direction: row-reverse - выстраивает все элементы в обтарном порядке с правой стороны
flex-direction: column - выстраивает элементы в колонном формате
flex-direction: column-reverse - выстраивает все элементы в колонном порядке, элементы в обратном порядке с правой стороны

flex-grow: 0 - не позволяет флекс-элементу занимать свободное пространств
flex-grow: >-1 - значение по умолчанию, элемент поглощает свободное пространство и увеличивается в размере

/* Позиционное выравнивание */
	justify-content: center;     /* Выравнивание элементов по центру */
	justify-content: start;      /* Выравнивание элементов в начале */
	justify-content: end;        /* Выравнивание элементов в конце */
	justify-content: flex-start; /* Выравнивание элементов с самого начала */
	justify-content: flex-end;   /* Выравнивание элементов с самого конца */
	justify-content: left;       /* Выравнивание элементов по левому краю */
	justify-content: right;      /* Выравнивание элементов по правому краю */
/* Выравнивание относительно осевой линии */
	justify-content: baseline;
	justify-content: first baseline;
	justify-content: last baseline;
	/* Распределенное выравнивание */
	justify-content: space-between; /* Равномерно распределяет все элементы по ширине flex-блока.
																		 Первый элемент вначале, последний в конце */
	justify-content: space-around;  /* Равномерно распределяет все элементы по ширине flex-блока.
																		 Все элементы имеют полуразмерное пространство
																		 с обоих концов */
	justify-content: space-evenly;  /* Равномерно распределяет все элементы по ширине flex-блока.
																		 Все элементы имеют равное пространство вокруг */
	justify-content: stretch;       /* Равномерно распределяет все элементы по ширине flex-блока.
																		 Все элементы имеют "авто-размер", чтобы соответствовать контейнеру */
/* Выравнивание при переполнении */
	justify-content: safe center;
	justify-content: unsafe center;
/* Глобальные значения */
	justify-content: inherit;
	justify-content: initial;
	justify-content: unset;

align-items выравнивает flex-элементы текущей flex-линии таким же образом, как и justify-content,
		но в перпендикулярном направлении.
	/* Align to cross-start */
		align-items: flex-start;
	/* Align to cross-end */
		align-items: flex-end;
	/* Центрировать элементы в поперечной оси */
		align-items: center;
	/* Выровняйте базовые линии предметов */
		align-items: baseline;
	/* Растянуть предметы, чтобы соответствовать */
		align-items: stretch;

align-self: - выполняет те же действия что и align-items, только для выбранного элемента 

align-content устанавливает распределение пространства между и вокруг элементами контента вдоль поперечной
 	оси элемента типа flexbox или grid.
	/* Основное позиционное выравнивание */
	/* align-content не принимает значения left и right */
		align-content: center;     /* Расположить элементы вокруг центра */
		align-content: start;      /* Расположить элементы в начале */
		align-content: end;        /* Расположить элементы в конце */
		align-content: flex-start; /* Расположить элементы flex в начале */
		align-content: flex-end;   /* Расположить элементы flex в конце */
	/* Нормальное выравнивание */
		align-content: normal;
	/* Выравнивание по базовой линии */
		align-content: baseline;
		align-content: first baseline;
		align-content: last baseline;
	/* Распределённое выравнивание */
		align-content: space-between; /* Распределить элементы равномерно
																		 Первый элемент находится на одном уровне с началом,
																		 последней - совпадает с концом */
		align-content: space-around;  /* Распределить элементы равномерно
																		 Элементы имеют половинное пространство
																		 на каждом конце */
		align-content: space-evenly;  /* Распределить элементы равномерно
																		 Элементы имеют одинаковое пространство вокруг них */
		align-content: stretch;       /* Распределить элементы равномерно
																		 Растянуть 'auto'-размерные элементы, чтобы заполнить
																		 контейнер */
	/* Выравнивание переполнения (overflow) */
		align-content: safe center;
		align-content: unsafe center;

Элементы располагаются в восходящем порядке по значению order.
/* Числовые значения, в том числе отрицательные */
order: 5;
order: -5;

flex-wrap -  задает правила вывода flex-элементов —  в одну строку или в несколько, с переносом блоков.
	flex-wrap: nowrap;
	flex-wrap: wrap;
	flex-wrap: wrap-reverse;

flex-basis: 200px - задает эелементам контейнера максимальную ширину в 200px, если сужать контейнер, и элемент становится меньше
200px то элемент переходит на новую строку, а остальные контейнеры растягиваются, и так пока все не перейдут на новую строку

display: inline-bloc - с этим в добавок нужно использовать vertical-align: top;


static - Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своем месте в документе. 
	Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.
relative - Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно 
	себя на основе значений top, right, bottom и left. Смещение не влияет на положение любых других элементов; 
	таким образом, пространство, заданное для элемента в макете страницы, такое же, как если бы позиция была static.
  Это значение создает новый контекст наложения, когда значение z-index не auto. Его влияние на элементы table-*-group, table-row,
	table-column, table-cell и table-caption не определено.
absolute - Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создается пробела. Он 
	расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется; в противном случае он 
	помещается относительно исходного содержащего блока. Его конечная позиция определяется значениями top, right, bottom, и left.
  Это значение создаёт новый контекст наложения, когда значение z-index не auto. Поля абсолютно позиционированных коробок не 
	сворачиваются с другими полями.
fixed - Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создается пространство. 
	Он позиционируется относительно исходного содержащего блока, установленного viewport, за исключением случаев, когда один из 
	его предков имеет свойство transform, perspective, или filter, установленное на что-то иное, кроме none 
	(см. CSS Transforms Spec), и в этом случае этот предок ведет себя как содержащий блок. (Обратите внимание, 
	что существуют несогласованности браузера с perspective и filter, способствующими содержанию формирования блоков.) 
	Его конечная позиция определяется значениями top, right, bottom и left. Это значение всегда создает новый контекст наложения. 
	В печатных документах элемент помещается в одно и то же положение на каждой странице.
sticky - Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его 
	ближайшего прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные 
	с таблицей, на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.
  Это значение всегда создает новый контекст наложения. Обратите внимание, что липкий элемент «прилипает» к его ближайшему 
	предшественнику, имеющему «механизм прокрутки» (созданный при overflow равном hidden, scroll, auto или overlay), даже 
	если тот не является ближайшим фактически прокручивающим предком. Это эффективно препятствует любому «липкому» поведению
